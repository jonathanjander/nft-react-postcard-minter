{"version":3,"sources":["utils/ipfsPinning.js","utils/web3.js","utils/etherscan.js","History.js","Error.js","App.js","serviceWorker.js","index.js"],"names":["require","config","axios","FormData","pinataApiKey","process","pinataApiSecret","uploadJSONToIPFS","JSONData","a","formatJSON","request","method","url","headers","pinata_api_key","pinata_secret_api_key","data","response","console","log","result","hash","IpfsHash","status","message","uploadDataToIPFS","form_data","append","maxContentLength","_boundary","attributes","pinataContent","i","length","trait_type","value","splice","getWallet","window","ethereum","Web3","web3","on","_chainId","location","reload","_address","accounts","account","alert","error","errorMessage","provider","providers","HttpProvider","eth","getAccounts","getContract","networkId","net","getId","deployedNetwork","SouvenirContract","networks","instance","Contract","abi","address","contract","getLatestERC721Tx","contractAddress","amountOfEntries","etherScanPrefix","History","props","componentDidMount","state","entries","entry","loadTxData","tx","etherScanAddressPrefix","etherScanTxPrefix","this","getTimeDiff","timeStamp","timestamp","from","osUrl","tokenID","fromUrl","toUrl","to","transUrl","icon","className","get","transaction","href","target","rel","substr","created","opensea","setState","transferHistory","getHeader","undefined","Object","keys","map","key","width","toUpperCase","getRowData","items","row","index","date","Date","timeDifference","now","bind","date1","date2","difference","getTime","daysDifference","Math","floor","hoursDifference","minutesDifference","Table","bordered","hover","Component","RenderRow","historyData","ErrorBoundary","hasError","children","React","App","initState","formJSON","pinataMetadata","name","description","image","metadata","royalty","amountToMint","rarity","statusMessage","mintNFT","methods","mint","send","transactionHash","receipt","link","events","Transfer","returnValues","tokenId","getHistoryTable","imageFile","onFormSubmit","onFileChanged","removeProperty","renderProperties","getStatusMessage","e","files","imageHash","imageStatus","includes","push","metadataHash","metadataStatus","properties","element","Form","Group","controlId","Button","type","variant","size","onClick","Label","Control","placeholder","onChange","handleChange","Row","Alert","Error","Container","fluid","Navbar","Text","Toggle","Collapse","onSubmit","event","preventDefault","replace","toLowerCase","Col","xs","required","ref","input","accept","Select","min","max","val","disabled","amount","defaultValue","addProperty","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.934bf1eb.chunk.js","sourcesContent":["//adapted from https://github.com/neha01/nft-demo/tree/master/scripts\r\n\r\nrequire('dotenv').config();\r\nconst axios = require('axios'); // promise based http client\r\nconst FormData = require('form-data'); // used to submit forms and file uploads\r\n\r\nconst pinataFileEndpoint = process.env.REACT_APP_PINATA_FILE_ENDPOINT;\r\nconst pinataJSONEndpoint = process.env.REACT_APP_PINATA_JSON_ENDPOINT;\r\nconst pinataApiKey = process.env.REACT_APP_PINATA_API_KEY;\r\nconst pinataApiSecret = process.env.REACT_APP_PINATA_API_SECRET;\r\n\r\n/*\r\nuploads a JSON file to IPFS via Pinata's API\r\nused for the NFT metadata\r\n */\r\nexport const uploadJSONToIPFS = async (JSONData) => {\r\n    JSONData = formatJSON(JSONData);\r\n    let result;\r\n    try {\r\n        const request = {\r\n            method: 'post',\r\n            url: pinataJSONEndpoint,\r\n            headers: {\r\n                pinata_api_key: pinataApiKey,\r\n                pinata_secret_api_key: pinataApiSecret,\r\n            },\r\n            data: JSONData,\r\n        };\r\n        const response = await axios(request)\r\n        console.log('Successfully pinned metadata to IPFS : ', response);\r\n        result = {\r\n            hash: response.data.IpfsHash,\r\n            status: response.status\r\n        }\r\n    }\r\n    catch (err) {\r\n        console.log('Error occurred while pinning metadata to IPFS: ', err);\r\n        result = {\r\n            hash: \"not-found\",\r\n            status:\"Error occurred while pinning metadata to IPFS: \" + err.message\r\n        }\r\n    }\r\n    return result;\r\n}\r\n\r\n/*\r\nuploads a file to IPFS via Pinata's API\r\nused for the NFT asset\r\ndata must be a file or a blob otherwise it doesn't work\r\nit uses the form data format in order to upload the file\r\n */\r\nexport const uploadDataToIPFS = async (data) => {\r\n    const form_data = new FormData();\r\n    let result;\r\n    try {\r\n        form_data.append('file', data)\r\n        const request = {\r\n            method: 'post',\r\n            url: pinataFileEndpoint,\r\n            maxContentLength: 'Infinity',\r\n            headers: {\r\n                pinata_api_key: pinataApiKey,\r\n                pinata_secret_api_key: pinataApiSecret,\r\n                'Content-Type': `multipart/form-data; boundary=${form_data._boundary}`,\r\n            },\r\n            data: form_data,\r\n        };\r\n        const response = await axios(request);\r\n        console.log('Successfully pinned image to IPFS : ', response);\r\n        result = {\r\n            hash: response.data.IpfsHash,\r\n            status: response.status\r\n        }\r\n    }\r\n    catch (err) {\r\n        console.log('Error occurred while pinning the image to IPFS: ', err);\r\n        result = {\r\n            hash: \"not-found\",\r\n            status:\"Error occurred while pinning the image to IPFS: \" + err.message\r\n        }\r\n    }\r\n    return result;\r\n}\r\n/*\r\nformats json data before uploading it to ipfs\r\nremoves empty attributes\r\n */\r\nconst formatJSON = (JSONData) => {\r\n    const attributes = JSONData.pinataContent.attributes;\r\n    for (let i = 0; i < attributes.length; i++) {\r\n        if(attributes[i].trait_type === \"\" || attributes[i].value === \"\"){\r\n            attributes.splice(i,1);\r\n        }\r\n    }\r\n    return JSONData;\r\n}\r\n","import SouvenirContract from \"../abis/Souvenir.json\";\r\nimport Web3 from \"web3\";\r\n// tries to get the wallet and requests the user account from injected ethereum API\r\nexport const getWallet = async ()=> {\r\n    if(window.ethereum) {\r\n        try {\r\n            // Get network provider and web3 instance.\r\n            const web3 = await new Web3(window.ethereum);\r\n\r\n            // reload page when chain or account changes\r\n            // from: https://docs.metamask.io/guide/ethereum-provider.html#events\r\n            window.ethereum.on('chainChanged', (_chainId) => window.location.reload());\r\n            window.ethereum.on('accountsChanged', function (_address) {window.location.reload()})\r\n\r\n            // Use web3 to get the user's accounts.\r\n            const accounts = await window.ethereum.request({\r\n                method: \"eth_requestAccounts\",\r\n            });\r\n\r\n            return {\r\n                web3: web3,\r\n                account: accounts[0]\r\n            }\r\n        } catch (error) {\r\n            // Catch any errors for any of the above operations.\r\n            alert(\r\n                \"Failed to connect to Wallet: \" + error.message,\r\n            );\r\n            console.error(error);\r\n            return {\r\n                web3: null,\r\n                account: \"\",\r\n                errorMessage: \"Failed to connect to Wallet: \"+ error.message\r\n            }\r\n        }\r\n    }\r\n    // fallback to local blockchain (Ganache)\r\n    else{\r\n        try{\r\n            const provider = new Web3.providers.HttpProvider(\r\n                \"http://127.0.0.1:7545\"\r\n            );\r\n            const web3 = await new Web3(provider);\r\n            // Use web3 to get the user's accounts.\r\n            let accounts = await web3.eth.getAccounts();\r\n            console.log(\"No web3 instance injected, using Local web3.\");\r\n\r\n            return {\r\n                web3: web3,\r\n                account: accounts[0]\r\n            }\r\n        }\r\n        catch (error) {\r\n            alert(\"No global or local web3 instance injected\",);\r\n            return {\r\n                web3: null,\r\n                account: \"\",\r\n                errorMessage: \"Failed to connect to Wallet: \"+ error.message\r\n            }\r\n        }\r\n    }\r\n}\r\nexport const getContract = async (web3, networkId)=> {\r\n    if(web3){\r\n    try {\r\n        // networkId 4 is the rinkeby network\r\n        if (typeof(networkId) == \"undefined\") {\r\n            // current networkId\r\n            networkId = await web3.eth.net.getId();\r\n        }\r\n        // Get the contract instance.\r\n        const deployedNetwork = SouvenirContract.networks[networkId];\r\n        const instance = new web3.eth.Contract(\r\n            SouvenirContract.abi,\r\n            deployedNetwork && deployedNetwork.address,\r\n        );\r\n        return {\r\n            contract: instance\r\n        };\r\n\r\n    }\r\n    catch (e) {\r\n        alert(\r\n            \"Failed to load contract\",\r\n        );\r\n        return {\r\n            contract: null\r\n        };\r\n    }\r\n    }\r\n}\r\n\r\n","import axios from \"axios\";\r\nrequire('dotenv').config();\r\nconst etherScanKey = process.env.REACT_APP_ETHERSCAN_API_KEY;\r\nconst etherScanPrefix = process.env.REACT_APP_ETHERSCAN_ENDPOINT_PREFIX;\r\n\r\n/*\r\nsends a get request to etherscan\r\nreturns x amount of entries for given smart contract\r\n */\r\nexport const getLatestERC721Tx = async (contractAddress, amountOfEntries) => {\r\n    try {\r\n        const url = etherScanPrefix+\r\n            \"?module=account\"+\r\n            \"&action=tokennfttx\"+\r\n            \"&contractaddress=\"+contractAddress+\r\n            \"&page=1\"+\r\n            \"&offset=\"+amountOfEntries+\r\n            \"&startblock=0\"+\r\n            \"&endblock=99999999\"+\r\n            \"&sort=desc\"+\r\n            \"&apikey=\"+etherScanKey\r\n        const request = {\r\n            method: 'get',\r\n            url: url,\r\n        };\r\n        const response = await axios(request);\r\n        return response;\r\n    }\r\n    catch (e) {\r\n        console.log(\"something went wrong fetching the history data\")\r\n    }\r\n}","import React, {Component} from \"react\";\r\nimport Table from 'react-bootstrap/Table';\r\nimport {FileEarmarkCode} from 'react-bootstrap-icons';\r\nimport {getLatestERC721Tx} from \"./utils/etherscan\";\r\n\r\n/*\r\nHistory component\r\nit shows the last 30 transactions made via the Souvenir Smart Contract\r\nit doesn't work for the local blockchain\r\nit currently only works on the rinkeby testnet\r\n */\r\nclass History extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            account: this.props.account,\r\n            contract: this.props.contract,\r\n            web3: this.props.web3,\r\n            transferHistory: [],\r\n            networkId: null,\r\n            errorMessage: this.props.errorMessage\r\n        }\r\n\r\n        this.getRowData = this.getRowData.bind(this);\r\n        this.getHeader = this.getHeader.bind(this);\r\n        this.timeDifference = this.timeDifference.bind(this);\r\n        this.loadTxData = this.loadTxData.bind(this);\r\n        this.getTimeDiff = this.getTimeDiff.bind(this);\r\n\r\n    }\r\n    /*\r\n    initialises the data from the etherscan api\r\n    max amount of entries shown is 30\r\n     */\r\n    componentDidMount = async () => {\r\n        const entries = await getLatestERC721Tx(this.state.contract._address, 30);\r\n        // calls loadTxData for every transaction\r\n        for (const entry of entries.data.result) {\r\n            await this.loadTxData(entry);\r\n        }\r\n    }\r\n    /*\r\n    takes a transaction and formats it into an expected table entry\r\n    data entry is being added into the transferHistory state array\r\n     */\r\n    loadTxData = async function(tx){\r\n        //hard coded rinkeby links\r\n        const etherScanAddressPrefix = \"https://rinkeby.etherscan.io/address/\";\r\n        const etherScanTxPrefix = \"https://rinkeby.etherscan.io/tx/\";\r\n\r\n        let timestamp = await this.getTimeDiff(tx.timeStamp);\r\n        const ZERO_ADDRESS = \"0x0000000000000000000000000000000000000000\";\r\n        let from = (tx.from === ZERO_ADDRESS) ? tx.contractAddress : tx.from;\r\n        let osUrl = \"https://testnets.opensea.io/assets/\" + tx.contractAddress + \"/\" + tx.tokenID;\r\n        let fromUrl = etherScanAddressPrefix + from;\r\n        let toUrl = etherScanAddressPrefix + tx.to;\r\n        let transUrl = etherScanTxPrefix + tx.hash;\r\n\r\n        let icon = null;\r\n        if (from === tx.contractAddress) {\r\n            icon = <FileEarmarkCode className=\"d-inline mb-1 me-1\"/>;\r\n        }\r\n        this.state.contract.get\r\n        let entry = {\r\n            tokenID: tx.tokenID,\r\n            transaction: <a href={transUrl} target=\"_blank\"\r\n                            rel=\"noopener noreferrer\">{tx.hash.substr(2, 10)}</a>,\r\n            from: <span>\r\n                            {icon}\r\n                <a href={fromUrl} target=\"_blank\" rel=\"noopener noreferrer\">{from.substr(2, 10)}</a></span>,\r\n            to: <a href={toUrl} target=\"_blank\"\r\n                   rel=\"noopener noreferrer\">{tx.to.substr(2, 10)}</a>,\r\n            created: timestamp + \" ago\",\r\n            opensea: <a href={osUrl} target=\"_blank\" rel=\"noopener noreferrer\">Opensea</a>\r\n        }\r\n        this.setState({transferHistory: [...this.state.transferHistory, entry]})\r\n    }\r\n    /*\r\n     adapted from https://medium.com/@subalerts/create-dynamic-table-from-json-in-react-js-1a4a7b1146ef\r\n     renders table header\r\n     */\r\n    getHeader = function(){\r\n        if(this.state.transferHistory != null && this.state.transferHistory[0] !== undefined){\r\n            const keys = Object.keys(this.state.transferHistory[0])\r\n            return keys.map((key)=>{\r\n                return <th className=\"text-black text-center\" key={key} width=\"50\">{key.toUpperCase()}</th>\r\n            })\r\n        }\r\n    }\r\n    /*\r\n    renders table row\r\n     */\r\n    getRowData = function(){\r\n        if(this.state.transferHistory != null && this.state.transferHistory[0] !== undefined){\r\n            const items = this.state.transferHistory;\r\n            const keys = Object.keys(items[0])\r\n            return items.map((row, index)=>{\r\n                return <tr className=\"text-truncate\" key={index}><RenderRow data={row} keys={keys}/></tr>\r\n            })\r\n        }\r\n    }\r\n    /*\r\n    getter for the time difference\r\n    returns time difference between the transaction timestamp and now\r\n     */\r\n    getTimeDiff = async (timestamp) =>{\r\n        const date = new Date(timestamp*1000);\r\n        return this.timeDifference(new Date(Date.now()), date);\r\n\r\n    }\r\n\r\n    /*\r\n    adapted from https://pretagteam.com/question/how-to-calculate-difference-between-two-timestamps-using-javascript\r\n    returns time difference between two dates in wanted preferred format\r\n     */\r\n    timeDifference(date1, date2) {\r\n        let difference = date1.getTime() - date2.getTime();\r\n\r\n\r\n        let daysDifference = Math.floor(difference / 1000 / 60 / 60 / 24);\r\n        if(daysDifference!=0){\r\n            if(daysDifference==1)\r\n                return daysDifference+\" day \";\r\n            return daysDifference+\" days \";\r\n        }\r\n\r\n        let hoursDifference = Math.floor(difference / 1000 / 60 / 60);\r\n        if(hoursDifference!=0){\r\n            if(hoursDifference==1)\r\n                return hoursDifference+\" hour \";\r\n            return hoursDifference+\" hours \";\r\n        }\r\n\r\n        let minutesDifference = Math.floor(difference / 1000 / 60);\r\n        if(minutesDifference!=0){\r\n            if(minutesDifference==1)\r\n                return minutesDifference+\" minute \";\r\n            return minutesDifference+\" minutes \";\r\n        }\r\n        else{\r\n            return \"less than a minute \";\r\n        }\r\n\r\n    }\r\n    /*\r\n    renders result\r\n     */\r\n    render() {\r\n        if(this.state.transferHistory != null) {\r\n            return (\r\n                <div>\r\n                    <Table bordered hover>\r\n                        <thead>\r\n                        <tr>\r\n                            {this.getHeader()}\r\n                        </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                        {this.getRowData()}\r\n                        </tbody>\r\n                    </Table>\r\n                </div>\r\n                \r\n            )\r\n        }\r\n        else{\r\n            return <h3>Loading Table...</h3>;\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\n/*\r\nadapted from https://medium.com/@subalerts/create-dynamic-table-from-json-in-react-js-1a4a7b1146ef\r\nrenders row\r\n */\r\nconst RenderRow = (historyData) =>{\r\n    if(historyData != null){\r\n        return historyData.keys.map((key) =>{\r\n            return <td key={key}>{historyData.data[key]}</td>\r\n        })\r\n    }\r\n}\r\n\r\nexport default History;","import React from \"react\";\r\n/*\r\nadapted from here from https://reactjs.org/docs/error-boundaries.html\r\nused to handle unhandled exceptions\r\n */\r\nclass ErrorBoundary extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { hasError: false };\r\n    }\r\n\r\n    static getDerivedStateFromError(error) {\r\n        // Update state so the next render will show the fallback UI.\r\n        return { hasError: true };\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h1>Something went wrong.</h1>;\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\nexport default ErrorBoundary;","import React, {Component} from \"react\";\r\nimport \"./App.css\";\r\nimport {uploadDataToIPFS, uploadJSONToIPFS} from \"./utils/ipfsPinning\";\r\nimport {getContract, getWallet} from \"./utils/web3\"\r\nimport History from \"./History\";\r\nimport Error from \"./Error\";\r\nimport {Container, Form, Button, Navbar, Row, Col, Alert} from \"react-bootstrap\";\r\n\r\n/*\r\nHandles all the frontend logic\r\nrenders the site\r\n */\r\nclass App extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            account: \"\",\r\n            contract: null,\r\n            web3: null,\r\n            statusMessage: \"\",\r\n            errorMessage: \"\",\r\n            networkId: null,\r\n            imageFile: null,\r\n            metadata: null,\r\n            rarity: \"Rare\",\r\n            amountToMint: 1,\r\n            royalty: 10,\r\n        }\r\n\r\n        this.onFormSubmit = this.onFormSubmit.bind(this);\r\n        this.onFileChanged = this.onFileChanged.bind(this);\r\n        this.getHistoryTable = this.getHistoryTable.bind(this);\r\n        this.removeProperty = this.removeProperty.bind(this)\r\n        this.renderProperties = this.renderProperties.bind(this)\r\n        this.getStatusMessage = this.getStatusMessage.bind(this)\r\n    }\r\n    /*\r\n    initialise form data\r\n     */\r\n    initState = async () =>{\r\n        let formJSON = {\r\n            pinataMetadata: {\r\n                name: \"\"\r\n            },\r\n            pinataContent: {\r\n                name: \"\",\r\n                description: \"\",\r\n                image: \"\",\r\n                attributes:[{\r\n                    trait_type:\"\",\r\n                    value:\"\"\r\n                }]\r\n            }\r\n        };\r\n        let royalty = 10;\r\n        let amountToMint = 1;\r\n        let rarity = \"Rare\";\r\n        this.setState({\r\n            metadata: formJSON,\r\n            royalty:royalty,\r\n            amountToMint:amountToMint,\r\n            rarity:rarity\r\n        });\r\n    }\r\n    /*\r\n    initialises wallet, account and contract\r\n     */\r\n    componentDidMount = async () => {\r\n        try {\r\n            await this.initState()\r\n            const {web3, account, errorMessage} = await getWallet();\r\n            const {contract} = await getContract(web3);\r\n            const networkId = await web3.eth.net.getId();\r\n            if(contract._address === null){\r\n                this.setState({\r\n                    errorMessage: \"No Contract Address found. The Smart Contract might not have been deployed on this network. Try the rinkeby test network  or a local blockchain like Ganache\",\r\n                })\r\n            }\r\n            this.setState({\r\n                web3: web3,\r\n                account: account,\r\n                contract: contract,\r\n                networkId: networkId,\r\n                statusMessage: errorMessage\r\n            });\r\n        }\r\n        catch (e) {\r\n            console.log(\"error at initialising: \"+e);\r\n            if(this.state.errorMessage===\"\"){\r\n                this.setState({errorMessage: \"error at initialising: \"+e.message})\r\n            }\r\n\r\n        }\r\n\r\n    };\r\n    /*\r\n    calls \"mint\" method from smart contract\r\n     */\r\n    mintNFT = async (hash) => {\r\n        this.state.contract.methods.mint(hash, this.state.amountToMint ,this.state.royalty*100).send({from: this.state.account}, async (error, transactionHash) => {\r\n            if(this.state.networkId <= 4 && !error) {\r\n                this.setState({statusMessage: \"Please Wait\"});\r\n            }\r\n        }).on('error', function (error) { // If the transaction was rejected by the network with a receipt, the second parameter will be the receipt.\r\n            console.log(error.message);\r\n        }).on('receipt', async receipt =>{\r\n            console.log(receipt);\r\n            if(receipt!=null && this.state.networkId <= 4) {\r\n                let link;\r\n                if(this.state.amountToMint > 1){\r\n                    link = \"https://testnets.opensea.io/assets/\" + this.state.contract._address + \"/\" + receipt.events.Transfer[0].returnValues.tokenId;\r\n                }\r\n                else {\r\n                    link = \"https://testnets.opensea.io/assets/\" + this.state.contract._address + \"/\" + receipt.events.Transfer.returnValues.tokenId;\r\n                }\r\n                if(receipt.status){\r\n                    this.setState({statusMessage: \"Minting successful. It might take some time until the NFT is visibile on \"+link})\r\n                }\r\n                else{\r\n                    this.setState({statusMessage: \"Something went wrong with minting the NFT. The transaction was reverted\"});\r\n                }\r\n            }\r\n        });\r\n    }\r\n    onFileChanged(e) {\r\n        this.setState({imageFile: e.target.files[0]})\r\n    }\r\n    /*\r\n    uploads asset file to IPFS\r\n    uploads metadata file to IPFS\r\n    calls mintNFT function\r\n     */\r\n    async onFormSubmit() {\r\n        try {\r\n\r\n            let metadata = this.state.metadata;\r\n            const {hash: imageHash, status: imageStatus} = await uploadDataToIPFS(this.state.imageFile);\r\n            metadata.pinataContent.image = \"ipfs://\"+imageHash;\r\n\r\n            let arr =  Object.keys(metadata.pinataContent.attributes).map((key) =>\r\n                metadata.pinataContent.attributes[key].trait_type\r\n            );\r\n            if (!arr.includes(\"Rarity\")){\r\n                metadata.pinataContent.attributes.push({trait_type: \"Rarity\", value: this.state.rarity })\r\n\r\n            }\r\n            this.setState({metadata: metadata});\r\n\r\n            const {hash:metadataHash, status: metadataStatus} = await uploadJSONToIPFS(metadata);\r\n            await this.mintNFT(metadataHash);\r\n            if(metadataStatus != 200 || imageStatus != 200){\r\n                this.setState({statusMessage: \"There was a problem uploading the files to IPFS: \"+ metadataStatus!=200? imageStatus : metadataStatus})\r\n            }\r\n\r\n        } catch (e) {\r\n            console.log(\"something went wrong with creating your NFT: \" + e);\r\n            this.setState({statusMessage: \"something went wrong when trying to submit: \"+e.message})\r\n        }\r\n    }\r\n    /*\r\n    if network is not the local blockchain then render the history table component\r\n     */\r\n    getHistoryTable = () => {\r\n        // network ids between 1 and 4 are the main- and testnets. anything after that might be local, where its not possible to render the history\r\n        if(this.state.networkId > 4){\r\n            return <h6 className=\"text-center\" >The NFT History doesn't exist on a local blockchain</h6>\r\n        }\r\n        else{\r\n            return(\r\n                <History\r\n                    web3={this.state.web3}\r\n                    account={this.state.account}\r\n                    contract={this.state.contract}\r\n                    errorMessage={this.state.statusMessage}\r\n                />\r\n            )\r\n        }\r\n    }\r\n    /*\r\n    adapted from https://bapunawarsaddam.medium.com/add-and-remove-form-fields-dynamically-using-react-and-react-hooks-3b033c3c0bf5\r\n    adds properties to metadata\r\n     */\r\n    addProperty(){\r\n        let data = this.state.metadata;\r\n        data.pinataContent.attributes.push({trait_type: \"\", value: \"\" })\r\n        this.setState(({\r\n            metadata: data\r\n        }))\r\n\r\n    }\r\n\r\n    /*\r\n    adapted from https://bapunawarsaddam.medium.com/add-and-remove-form-fields-dynamically-using-react-and-react-hooks-3b033c3c0bf5\r\n    handles change of metadata properties\r\n     */\r\n    handleChange(i, e) {\r\n        let data = this.state.metadata;\r\n        data.pinataContent.attributes[i][e.target.name] = e.target.value;\r\n        this.setState(({\r\n            metadata: data\r\n        }))\r\n    }\r\n\r\n    /*\r\n    adapted from https://bapunawarsaddam.medium.com/add-and-remove-form-fields-dynamically-using-react-and-react-hooks-3b033c3c0bf5\r\n    removes properties from metadata\r\n     */\r\n    removeProperty(index) {\r\n        let data = this.state.metadata;\r\n            data.pinataContent.attributes.splice(index,1);\r\n            this.setState(({\r\n                metadata: data\r\n            }))\r\n    }\r\n    /*\r\n    renders the form properties\r\n     */\r\n    renderProperties() {\r\n        let properties = [];\r\n        this.state.metadata.pinataContent.attributes.map((element, index) =>\r\n        {\r\n            if(element.trait_type!=\"Rarity\") {\r\n                properties.push(<Form.Group key={index} controlId=\"property\" className=\"mt-2 mb-2\">\r\n                    <Button type=\"button\" variant=\"danger\" className=\"float-lg-end mt-2\" size=\"sm\"\r\n                            onClick={() => this.removeProperty(index)}>\r\n                        remove\r\n                    </Button>\r\n                    <Form.Label className=\"mt-2\">Trait type</Form.Label>\r\n                    <Form.Control\r\n                        placeholder='Region'\r\n                        value={element.trait_type}\r\n                        name=\"trait_type\"\r\n                        onChange={e => this.handleChange(index, e)}\r\n                    />\r\n                    <Form.Label className=\"mt-2\">Trait value</Form.Label>\r\n                    <Form.Control\r\n                        placeholder='French polynesia'\r\n                        value={element.value}\r\n                        name=\"value\"\r\n                        onChange={e => this.handleChange(index, e)}\r\n                    />\r\n                </Form.Group>);\r\n            }\r\n        })\r\n        return properties;\r\n    }\r\n    /*\r\n   returns status Message\r\n   only works for the rinkeby testnet\r\n    */\r\n    getStatusMessage(){\r\n        if(this.state.statusMessage !== undefined) {\r\n            return (\r\n                <Row>\r\n                    <Alert className=\"mt-3 fw-bold\">\r\n                        <span className=\"text-center\">{this.state.statusMessage}</span>\r\n                    </Alert>\r\n                </Row>\r\n            )\r\n        }\r\n    }\r\n    /*\r\n    renders site\r\n    */\r\n    render() {\r\n        //checks whether an errorMessage exists by now, if so, return Error component\r\n        if(this.state.errorMessage && this.state.errorMessage!==\"\" ){\r\n            return (<Error>\r\n                <h3>{this.state.errorMessage}</h3>\r\n            </Error>);\r\n        }\r\n        // waiting for web3. refresh the site to try again\r\n        if (!this.state.web3) {\r\n            return <div>Loading Web3, accounts, and contract...</div>;\r\n        }\r\n        // returns the contents site\r\n        return (\r\n            <Container fluid className=\"bg-light\">\r\n                <Navbar>\r\n                    <Container fluid>\r\n                        <Navbar.Text className=\"text-xl font-semibold text-black text-center\">Contract Address: {this.state.contract._address}</Navbar.Text>\r\n                        <Navbar.Toggle />\r\n                        <Navbar.Collapse className=\"justify-content-end\">\r\n                            <Navbar.Text className=\"text-xl font-semibold text-black text-center\">\r\n                                Signed in as: {this.state.account}\r\n                            </Navbar.Text>\r\n                        </Navbar.Collapse>\r\n                    </Container>\r\n                </Navbar>\r\n                <Error>\r\n                <Container fluid className=\"bg-light\">\r\n                    <Row>\r\n                            <Form onSubmit={async (event) => {\r\n                                event.preventDefault();\r\n                                let data = this.state.metadata;\r\n                                data.pinataContent.name = this.name.value;\r\n                                data.pinataContent.description = this.description.value;\r\n                                data.pinataMetadata.name = data.pinataContent.name.replace(/\\s+/g, '-').toLowerCase() + \".json\"\r\n                                await this.setState({metadata:data, royalty: this.royalty.value})\r\n                                await this.onFormSubmit();\r\n                            }} className=\"shadow p-5 mb-4 bg-white rounded\">\r\n                                <Row>\r\n                                    <h1 className=\"title text-center\">Souvenir NFT Minter</h1>\r\n                                <Col xs={3}>\r\n                                <Form.Group controlId=\"formName\">\r\n                                    <Form.Label>Name</Form.Label>\r\n                                    <Form.Control placeholder='e.g. Bora Bora Beach In The Afternoon'\r\n                                                  required\r\n                                                  ref={(input) => {\r\n                                                      this.name = input\r\n                                                  }}/>\r\n                                </Form.Group>\r\n                                </Col>\r\n                                <Col xs={5}>\r\n                                <Form.Group controlId=\"formDescription\">\r\n                                    <Form.Label>Description</Form.Label>\r\n                                    <Form.Control placeholder='e.g. 30°C in the Summer'\r\n                                                  required\r\n                                                  ref={(input) => {\r\n                                                      this.description = input\r\n                                                  }}  />\r\n                                </Form.Group>\r\n                                </Col>\r\n                                <Col xs={4}>\r\n                                <Form.Group controlId=\"formFile\">\r\n                                    <Form.Label>Asset File</Form.Label>\r\n                                    <Form.Control type=\"file\" onChange={this.onFileChanged}\r\n                                                  accept=\"image/*, video/*, audio/*\"\r\n                                                  required\r\n\r\n                                    />\r\n                                </Form.Group>\r\n                                </Col>\r\n                                    <Row className=\"mt-5\">\r\n                                        <Col xs={3}>\r\n                                            <Form.Group controlId=\"rarity\">\r\n                                                <Form.Label>Rarity</Form.Label>\r\n                                                <Form.Select\r\n                                                    required\r\n                                                    onChange={(e) =>{\r\n                                                        this.setState({rarity: e.target.value})\r\n                                                        if(e.target.value !== \"Rare\"){\r\n                                                            this.setState({amountToMint: 1})\r\n                                                        }\r\n                                                    }}\r\n                                                >\r\n                                                    <option value=\"Rare\">Rare (1)</option>\r\n                                                    <option value=\"Super Rare\">Super Rare (2)</option>\r\n                                                    <option value=\"Unique\">Unique (3)</option>\r\n                                                </Form.Select>\r\n                                            </Form.Group>\r\n                                        </Col>\r\n                                        <Col xs={3}>\r\n                                            <Form.Group controlId=\"amount\">\r\n                                                <Form.Label>Amount of Tokens to mint</Form.Label>\r\n                                                <Form.Control\r\n                                                              type=\"number\"\r\n                                                              min={1}\r\n                                                              max={20}\r\n                                                              placeholder=\"between 1 and 100\"\r\n                                                              value={this.state.amountToMint}\r\n                                                              onChange={((e) => {\r\n                                                                  let val = e.target.value\r\n                                                                  this.setState({amountToMint: val})\r\n                                                              })}\r\n                                                              disabled = {(this.state.rarity===\"Rare\")? \"\" : \"disabled\"}\r\n                                                              ref={(input) => {\r\n                                                                  this.amount = input;\r\n                                                              }}\r\n                                                              required\r\n                                                />\r\n                                            </Form.Group>\r\n\r\n                                        </Col>\r\n                                        <Col xs={3} className=\"mx-sm-5\">\r\n                                            <Form.Group controlId=\"royalty\">\r\n                                                <Form.Label>Royalty fees in %</Form.Label>\r\n                                                <Form.Control defaultValue=\"10\"\r\n                                                              type=\"number\"\r\n                                                              min={0}\r\n                                                              max={30}\r\n                                                              placeholder=\"between 0% and 30%\"\r\n                                                              ref={(input) => {\r\n                                                                  this.royalty = input\r\n                                                              }}\r\n                                                              required\r\n                                                />\r\n                                            </Form.Group>\r\n                                        </Col>\r\n                                    </Row>\r\n                                </Row>\r\n                                <Form.Group>\r\n                                    <Button type=\"button\" size=\"sm\" className=\"mt-5\" onClick={()=>this.addProperty()}>\r\n                                        Add property\r\n                                    </Button>\r\n                                <Row xs={5} className=\"d-flex align-items-end mt-3\" >\r\n                                    {this.renderProperties()}\r\n                                    </Row>\r\n\r\n                                </Form.Group>\r\n                                <Row>\r\n                                <Button type=\"submit\" variant=\"outline-primary\" className=\"mt-5\">\r\n                                    Mint\r\n                                </Button>\r\n                                </Row>\r\n                                {this.getStatusMessage()}\r\n                            </Form>\r\n\r\n                        <Container fluid className=\"pt-5\">\r\n                            {this.getHistoryTable()}\r\n                        </Container>\r\n                    </Row>\r\n                </Container>\r\n                </Error>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n\r\n\r\n// window.onunhandledrejection = (e) => {\r\n//     alert(\"unhandled rejection: \"+e)\r\n// }\r\n"],"sourceRoot":""}